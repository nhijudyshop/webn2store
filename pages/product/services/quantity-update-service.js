// pages/product/services/quantity-update-service.js

import { tposRequest } from '../../../shared/api/tpos-api.js';
import { currentProduct } from '../inventory-state.js'; // Import currentProduct to get ProductTmplId

/**
 * Updates variant quantities on TPOS using the new 3-step OData process.
 * @param {Object.<number, number>} changedQtyMap - A map of {variantId: newQuantity}.
 * @returns {Promise<void>}
 */
export async function updateVariantQuantitiesIfChanged(changedQtyMap) {
    if (Object.keys(changedQtyMap).length === 0) {
        console.log("‚è≠Ô∏è No quantity changes detected, skipping update.");
        return;
    }

    if (!currentProduct || !currentProduct.Id) {
        throw new Error("Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m cha (ProductTmplId) ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng.");
    }

    console.log(`üì¶ Updating quantities for product template ${currentProduct.Id} with changes:`, changedQtyMap);

    try {
        // Step 1: Get Payload Template
        const getTemplatePayload = { "model": { "ProductTmplId": currentProduct.Id } };
        const templateResponse = await tposRequest('/api/stock-change-get-template', {
            method: 'POST',
            body: getTemplatePayload
        });

        if (!templateResponse || !Array.isArray(templateResponse.value) || templateResponse.value.length === 0) {
            throw new Error("Kh√¥ng th·ªÉ l·∫•y m·∫´u payload c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ª´ TPOS.");
        }

        // The template response contains an array of objects, each representing a variant.
        // We need to find the specific variant(s) and update their NewQuantity.
        const modifiedTemplate = templateResponse.value.map(item => {
            const variantId = item.Product.Id;
            const newItem = { ...item }; // Create a mutable copy

            // D·ª±a tr√™n payload m·∫´u b·∫°n cung c·∫•p, c√°c tr∆∞·ªùng QtyAvailable v√† VirtualAvailable
            // b√™n trong ƒë·ªëi t∆∞·ª£ng Product kh√¥ng c·∫ßn ph·∫£i x√≥a.
            // Ch√∫ng l√† m·ªôt ph·∫ßn c·ªßa c·∫•u tr√∫c Product v√† kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn NewQuantity.
            
            if (changedQtyMap.hasOwnProperty(variantId)) {
                newItem.NewQuantity = changedQtyMap[variantId];
            }
            return newItem;
        });

        // Step 2: Post Changed Quantities
        const postQtyResponse = await tposRequest('/api/stock-change-post-qty', {
            method: 'POST',
            body: { value: modifiedTemplate } // Wrap the array in a 'value' property as per TPOS OData standard
        });

        if (!postQtyResponse || !Array.isArray(postQtyResponse.value) || postQtyResponse.value.length === 0) {
            throw new Error("Kh√¥ng th·ªÉ ƒëƒÉng t·∫£i s·ªë l∆∞·ª£ng ƒë√£ thay ƒë·ªïi l√™n TPOS.");
        }

        const idsToExecute = postQtyResponse.value.map(item => item.Id);

        // Step 3: Execute Change
        const executePayload = { "ids": idsToExecute };
        await tposRequest('/api/stock-change-execute', {
            method: 'POST',
            body: executePayload
        });

        console.log(`‚úÖ Stock update successful for product template ${currentProduct.Id}.`);

    } catch (error) {
        console.error(`‚ùå Error updating stock for product template ${currentProduct.Id}:`, error);
        throw new Error(`L·ªói c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng: ${error.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh."}`);
    }
}